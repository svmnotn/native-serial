/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class AvailablePort {
  readonly path: string;
  readonly type: string;
  readonly usb?: UsbInfo;
  open(
    onDataReceived: (arg: Buffer) => void,
    onError: (err: Error | null) => void,
    settings?: PortSettings | undefined | null,
  ): OpenPort;
}

export declare class OpenPort {
  write(data: Buffer): void;
  close(): void;
}

export declare const enum DataBits {
  Five = 'Five',
  Six = 'Six',
  Seven = 'Seven',
  Eight = 'Eight',
}

export declare const enum FlowControl {
  None = 'None',
  Software = 'Software',
  Hardware = 'Hardware',
}

export declare function listPorts(): Array<AvailablePort>;

export declare const enum Parity {
  None = 'None',
  Odd = 'Odd',
  Even = 'Even',
}

export interface PortSettings {
  baudRate?: number;
  /** read timeout in ms */
  timeoutMs?: number;
  dataBits?: DataBits;
  parity?: Parity;
  stopBits?: StopBits;
  flowControl?: FlowControl;
}

export declare const enum StopBits {
  One = 'One',
  Two = 'Two',
}

export interface UsbInfo {
  readonly vid: number;
  readonly pid: number;
  readonly serial?: string;
  readonly manufacturer?: string;
  readonly product?: string;
}
